var documenterSearchIndex = {"docs":
[{"location":"api/#CaimCore-API-1","page":"API Reference","title":"CaimCore API","text":"","category":"section"},{"location":"api/#","page":"API Reference","title":"API Reference","text":"CurrentModule = CaimCore","category":"page"},{"location":"api/#Core-1","page":"API Reference","title":"Core","text":"","category":"section"},{"location":"api/#","page":"API Reference","title":"API Reference","text":"version","category":"page"},{"location":"api/#CaimCore.version","page":"API Reference","title":"CaimCore.version","text":"version()\n\nGet the current version of CaimCore.\n\njulia> CaimCore.version()\nv\"0.1.0\"\n\n\n\n\n\n","category":"function"},{"location":"api/#Sessions-1","page":"API Reference","title":"Sessions","text":"","category":"section"},{"location":"api/#","page":"API Reference","title":"API Reference","text":"Sessions provide the core organizational structure of CaimCore, connecting the various phases of analysis, and providing persistent storage.","category":"page"},{"location":"api/#","page":"API Reference","title":"API Reference","text":"Session\nSessionStorage\nsave(::AbstractString, ::Session)\nload(::Type{Session}, ::AbstractString)","category":"page"},{"location":"api/#CaimCore.Session","page":"API Reference","title":"CaimCore.Session","text":"Session(path[, storage])\n\nA structure for storing session information for a CaimCore analysis.\n\n\n\n\n\n","category":"type"},{"location":"api/#CaimCore.SessionStorage","page":"API Reference","title":"CaimCore.SessionStorage","text":"SessionStorage([version])\n\nPersistent storage component of a CaimCore Session. This data will be saved and read from disk via calls to save and load.\n\njulia> SessionStorage()\nSessionStorage(v\"0.1.0\")\n\n\n\n\n\n","category":"type"},{"location":"api/#CaimCore.save-Tuple{AbstractString,Session}","page":"API Reference","title":"CaimCore.save","text":"save(filename, session)\n\nSave the persistent component of a Session to a disc.\n\n\n\n\n\n","category":"method"},{"location":"api/#CaimCore.load-Tuple{Type{Session},AbstractString}","page":"API Reference","title":"CaimCore.load","text":"load(::Type{Session}, filename)\n\nLoad a Session from disc.\n\n\n\n\n\n","category":"method"},{"location":"api/#Datasets-1","page":"API Reference","title":"Datasets","text":"","category":"section"},{"location":"api/#","page":"API Reference","title":"API Reference","text":"Dataset\nVideoGraphicDataset","category":"page"},{"location":"api/#CaimCore.Dataset","page":"API Reference","title":"CaimCore.Dataset","text":"Dataset\n\nA supertype for all loadable datasets\n\n\n\n\n\n","category":"type"},{"location":"api/#CaimCore.VideoGraphicDataset","page":"API Reference","title":"CaimCore.VideoGraphicDataset","text":"VideoGraphicDataset <: Dataset\n\nA supertype for all videographic datasets\n\n\n\n\n\n","category":"type"},{"location":"api/#Image-Stacks-1","page":"API Reference","title":"Image Stacks","text":"","category":"section"},{"location":"api/#","page":"API Reference","title":"API Reference","text":"ImageStack\nload(::Type{ImageStack}, ::AbstractString)\nload(::Type{ImageStack}, ::AbstractArray{<:AbstractString,1})","category":"page"},{"location":"api/#CaimCore.ImageStack","page":"API Reference","title":"CaimCore.ImageStack","text":"ImageStack <: VideoGraphicDataset\nImageStack(frames::Array{C,3}) where {C <: Colorant}\nImageStack(frames::AbstractVector{Matrix{C}} where {C <: Colorant}\n\nAn image stack consists of a collection of 2-D images, running in time.\n\n\n\n\n\n","category":"type"},{"location":"api/#CaimCore.load-Tuple{Type{ImageStack},AbstractString}","page":"API Reference","title":"CaimCore.load","text":"load(::Type{ImageStack}, dir[, ext]; ignoredots=true)\n\nLoad all image files from a directory into an ImageStack. If provided, only files with extention ext will be loaded. Files whose name begins with a . will be ignored if ignoredots is true.\n\nThe files are sorted lexicographically before being loaded. The files must all have the same size, file extention and color space, e.g. RGB{N0f8}, Gray{N0f8}, etc..\n\njulia> readdir()\n6-element Array{String,1}:\n \".DS_Store\"\n \"000001.tiff\"\n \"000002.tiff\"\n \"000003.tiff\"\n \"000004.tiff\"\n \"000005.tiff\"\n\njulia> load(ImageStack, \".\")\nImageStack{ColorTypes.RGB{FixedPointNumbers.Normed{UInt8,8}}}\n  size: 20×20×5\n\njulia> load(ImageStack, \".\"; ignoredots=false)\nERROR: files must all have the same extension; got [\"\", \".tiff\"]\n[...]\n\nYou can filter files by extension.\n\njulia> load(ImageStack, \".\")\nERROR: files must all have the same extension; got [\".png\", \".tiff\"]\n[...]\n\njulia> load(ImageStack, \".\", \".tiff\")\nImageStack{ColorTypes.RGB{FixedPointNumbers.Normed{UInt8,8}}}\n  size: 20×20×2\n\n\n\n\n\n","category":"method"},{"location":"api/#CaimCore.load-Tuple{Type{ImageStack},AbstractArray{#s1,1} where #s1<:AbstractString}","page":"API Reference","title":"CaimCore.load","text":"load(::Type{ImageStack}, files)\n\nLoad files into an image stack in the order they are provided.\n\nThe files must all have the same size, file extention and color space, e.g. RGB{N0f8}, Gray{N0f8}, etc..\n\njulia> load(ImageStack, [\"000001.tiff\", \"000002.tiff\"])\nImageStack{ColorTypes.RGB{FixedPointNumbers.Normed{UInt8,8}}}\n  size: 20×20×2\n\n\n\n\n\n","category":"method"},{"location":"#CaimCore.jl-1","page":"Home","title":"CaimCore.jl","text":"","category":"section"},{"location":"#","page":"Home","title":"Home","text":"Documentation for CaimCore.jl","category":"page"}]
}
